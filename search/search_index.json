{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Welcome to the passbook Documentation. passbook is an open-source Identity Provider and Usermanagement software. It can be used as a central directory for users or customers and it can integrate with your existing Directory. passbook can also be used as part of an Application to facilitate User Enrollment, Password recovery and Social Login. passbook uses the following Terminology: Policy \u00b6 A Policy is at a base level a yes/no gate. It will either evaluate to True or False depending on the Policy Kind and settings. For example, a \"Group Membership Policy\" evaluates to True if the User is member of the specified Group and False if not. This can be used to conditionally apply Factors and grant/deny access. Provider \u00b6 A Provider is a way for other Applications to authenticate against passbook. Common Providers are OpenID Connect (OIDC) and SAML. Source \u00b6 Sources are ways to get users into passbook. This might be an LDAP Connection to import Users from Active Directory, or an OAuth2 Connection to allow Social Logins. Application \u00b6 An application links together Policies with a Provider, allowing you to control access. It also holds Information like UI Name, Icon and more. Factors \u00b6 Factors represent Authentication Factors, like a Password or OTP. These Factors can be dynamically enabled using policies. This allows you to, for example, force users from a certain IP ranges to complete a Captcha to authenticate. Property Mappings \u00b6 Property Mappings allow you to make Information available for external Applications. For example, if you want to login to AWS with passbook, you'd use Property Mappings to set the User's Roles based on their Groups.","title":"Home"},{"location":"#welcome","text":"Welcome to the passbook Documentation. passbook is an open-source Identity Provider and Usermanagement software. It can be used as a central directory for users or customers and it can integrate with your existing Directory. passbook can also be used as part of an Application to facilitate User Enrollment, Password recovery and Social Login. passbook uses the following Terminology:","title":"Welcome"},{"location":"#policy","text":"A Policy is at a base level a yes/no gate. It will either evaluate to True or False depending on the Policy Kind and settings. For example, a \"Group Membership Policy\" evaluates to True if the User is member of the specified Group and False if not. This can be used to conditionally apply Factors and grant/deny access.","title":"Policy"},{"location":"#provider","text":"A Provider is a way for other Applications to authenticate against passbook. Common Providers are OpenID Connect (OIDC) and SAML.","title":"Provider"},{"location":"#source","text":"Sources are ways to get users into passbook. This might be an LDAP Connection to import Users from Active Directory, or an OAuth2 Connection to allow Social Logins.","title":"Source"},{"location":"#application","text":"An application links together Policies with a Provider, allowing you to control access. It also holds Information like UI Name, Icon and more.","title":"Application"},{"location":"#factors","text":"Factors represent Authentication Factors, like a Password or OTP. These Factors can be dynamically enabled using policies. This allows you to, for example, force users from a certain IP ranges to complete a Captcha to authenticate.","title":"Factors"},{"location":"#property-mappings","text":"Property Mappings allow you to make Information available for external Applications. For example, if you want to login to AWS with passbook, you'd use Property Mappings to set the User's Roles based on their Groups.","title":"Property Mappings"},{"location":"factors/","text":"Factors \u00b6 A factor represents a single authenticating factor for a user. Common examples of this would be a password or an OTP. These factors can be combined in any order, and can be dynamically enabled using policies. Password Factor \u00b6 This is the standard Password Factor. It allows you to select which Backend the password is checked with. here you can also specify which Policies are used to check the password. You can also specify which Factors a User has to pass to recover their account. Dummy Factor \u00b6 This factor waits a random amount of time. Mostly used for debugging. E-Mail Factor \u00b6 This factor is mostly for recovery, and used in conjunction with the Password Factor. OTP Factor \u00b6 This is your typical One-Time Password implementation, compatible with Authy and Google Authenticator. You can enfore this Factor so that every user has to configure it, or leave it optional. Captcha Factor \u00b6 While this factor doesn't really authenticate a user, it is part of the Authentication Flow. passbook uses Google's reCaptcha implementation.","title":"Factors"},{"location":"factors/#factors","text":"A factor represents a single authenticating factor for a user. Common examples of this would be a password or an OTP. These factors can be combined in any order, and can be dynamically enabled using policies.","title":"Factors"},{"location":"factors/#password-factor","text":"This is the standard Password Factor. It allows you to select which Backend the password is checked with. here you can also specify which Policies are used to check the password. You can also specify which Factors a User has to pass to recover their account.","title":"Password Factor"},{"location":"factors/#dummy-factor","text":"This factor waits a random amount of time. Mostly used for debugging.","title":"Dummy Factor"},{"location":"factors/#e-mail-factor","text":"This factor is mostly for recovery, and used in conjunction with the Password Factor.","title":"E-Mail Factor"},{"location":"factors/#otp-factor","text":"This is your typical One-Time Password implementation, compatible with Authy and Google Authenticator. You can enfore this Factor so that every user has to configure it, or leave it optional.","title":"OTP Factor"},{"location":"factors/#captcha-factor","text":"While this factor doesn't really authenticate a user, it is part of the Authentication Flow. passbook uses Google's reCaptcha implementation.","title":"Captcha Factor"},{"location":"policies/","text":"Policies \u00b6 Kinds \u00b6 There are two different Kind of policies, a Standard Policy and a Password Policy. Normal Policies just evaluate to True or False, and can be used everywhere. Password Policies apply when a Password is set (during User enrollment, Recovery or anywhere else). These policies can be used to apply Password Rules like length, etc. The can also be used to expire passwords after a certain amount of time. Standard Policies \u00b6 Group-Membership Policy \u00b6 This policy evaluates to True if the current user is a Member of the selected group. Reputation Policy \u00b6 passbook keeps track of failed login attempts by Source IP and Attempted Username. These values are saved as scores. Each failed login decreases the Score for the Client IP as well as the targeted Username by one. This policy can be used to for example prompt Clients with a low score to pass a Captcha before they can continue. Field matcher Policy \u00b6 This policy allows you to evaluate arbitrary comparisons against the User instance. Currently supported fields are: Username E-Mail Name Is_active Date joined Any of the following operations are supported: Starts with Ends with Contains Regexp (standard Python engine) Exact SSO Policy \u00b6 This policy evaluates to True if the current Authentication Flow has been initiated through an external Source, like OAuth and SAML. Webhook Policy \u00b6 This policy allows you to send an arbitrary HTTP Request to any URL. You can then use JSONPath to extract the result you need. Password Policies \u00b6 Password Policy \u00b6 This Policy allows you to specify Password rules, like Length and required Characters. The following rules can be set: Minimum amount of Uppercase Characters Minimum amount of Lowercase Characters Minimum amount of Symbols Characters Minimum Length Symbol charset (define which characters are counted as symbols) Have I Been Pwned Policy \u00b6 This Policy checks the hashed Password against the Have I Been Pwned API. This only sends the first 5 characters of the hashed password. The remaining comparison is done within passbook. Password-Expiry Policy \u00b6 This policy can enforce regular password rotation by expiring set Passwords after a finite amount of time. This forces users to set a new password.","title":"Policies"},{"location":"policies/#policies","text":"","title":"Policies"},{"location":"policies/#kinds","text":"There are two different Kind of policies, a Standard Policy and a Password Policy. Normal Policies just evaluate to True or False, and can be used everywhere. Password Policies apply when a Password is set (during User enrollment, Recovery or anywhere else). These policies can be used to apply Password Rules like length, etc. The can also be used to expire passwords after a certain amount of time.","title":"Kinds"},{"location":"policies/#standard-policies","text":"","title":"Standard Policies"},{"location":"policies/#group-membership-policy","text":"This policy evaluates to True if the current user is a Member of the selected group.","title":"Group-Membership Policy"},{"location":"policies/#reputation-policy","text":"passbook keeps track of failed login attempts by Source IP and Attempted Username. These values are saved as scores. Each failed login decreases the Score for the Client IP as well as the targeted Username by one. This policy can be used to for example prompt Clients with a low score to pass a Captcha before they can continue.","title":"Reputation Policy"},{"location":"policies/#field-matcher-policy","text":"This policy allows you to evaluate arbitrary comparisons against the User instance. Currently supported fields are: Username E-Mail Name Is_active Date joined Any of the following operations are supported: Starts with Ends with Contains Regexp (standard Python engine) Exact","title":"Field matcher Policy"},{"location":"policies/#sso-policy","text":"This policy evaluates to True if the current Authentication Flow has been initiated through an external Source, like OAuth and SAML.","title":"SSO Policy"},{"location":"policies/#webhook-policy","text":"This policy allows you to send an arbitrary HTTP Request to any URL. You can then use JSONPath to extract the result you need.","title":"Webhook Policy"},{"location":"policies/#password-policies","text":"","title":"Password Policies"},{"location":"policies/#password-policy","text":"This Policy allows you to specify Password rules, like Length and required Characters. The following rules can be set: Minimum amount of Uppercase Characters Minimum amount of Lowercase Characters Minimum amount of Symbols Characters Minimum Length Symbol charset (define which characters are counted as symbols)","title":"Password Policy"},{"location":"policies/#have-i-been-pwned-policy","text":"This Policy checks the hashed Password against the Have I Been Pwned API. This only sends the first 5 characters of the hashed password. The remaining comparison is done within passbook.","title":"Have I Been Pwned Policy"},{"location":"policies/#password-expiry-policy","text":"This policy can enforce regular password rotation by expiring set Passwords after a finite amount of time. This forces users to set a new password.","title":"Password-Expiry Policy"},{"location":"property-mappings/","text":"Property Mappings \u00b6 Property Mappings allow you to pass information to external Applications. For example, pass the current user's Groups as a SAML Parameter. Property Mappings are also used to map Source fields to passbook fields, for example when using LDAP. SAML Property Mapping \u00b6 SAML Property Mappings allow you embed Information into the SAML AuthN Request. THis Information can then be used by the Application to assign permissions for example. You can find examples here LDAP Property Mapping \u00b6 LDAP Property Mappings are used when you define a LDAP Source. These Mappings define which LDAP Property maps to which passbook Property. By default, these mappings are created: Autogenerated LDAP Mapping: givenName -> first_name Autogenerated LDAP Mapping: mail -> email Autogenerated LDAP Mapping: name -> name Autogenerated LDAP Mapping: sAMAccountName -> username Autogenerated LDAP Mapping: sn -> last_name These are configured for the most common LDAP Setups.","title":"Property Mappings"},{"location":"property-mappings/#property-mappings","text":"Property Mappings allow you to pass information to external Applications. For example, pass the current user's Groups as a SAML Parameter. Property Mappings are also used to map Source fields to passbook fields, for example when using LDAP.","title":"Property Mappings"},{"location":"property-mappings/#saml-property-mapping","text":"SAML Property Mappings allow you embed Information into the SAML AuthN Request. THis Information can then be used by the Application to assign permissions for example. You can find examples here","title":"SAML Property Mapping"},{"location":"property-mappings/#ldap-property-mapping","text":"LDAP Property Mappings are used when you define a LDAP Source. These Mappings define which LDAP Property maps to which passbook Property. By default, these mappings are created: Autogenerated LDAP Mapping: givenName -> first_name Autogenerated LDAP Mapping: mail -> email Autogenerated LDAP Mapping: name -> name Autogenerated LDAP Mapping: sAMAccountName -> username Autogenerated LDAP Mapping: sn -> last_name These are configured for the most common LDAP Setups.","title":"LDAP Property Mapping"},{"location":"providers/","text":"Providers \u00b6 Providers allow external Applications to authenticate against passbook and use its User Information. OpenID Provider \u00b6 This provider uses the commonly used OpenID Connect variation of OAuth2. OAuth2 Provider \u00b6 This provider is slightly different than the OpenID Provider. While it uses the same basic OAuth2 Protocol, it provides a GitHub-compatible Endpoint. This allows you to integrate Applications, which don't support Custom OpenID Providers. The API exposes Username, E-Mail, Name and Groups in a GitHub-compatible format. SAML Provider \u00b6 This provider allows you to integrate Enterprise Software using the SAML2 Protocol. It supports signed Requests. This Provider also has Property Mappings , which allows you to expose Vendor-specific Fields. Default fields are: eduPersonPrincipalName : User's E-Mail cn : User's Full Name mail : User's E-Mail displayName : User's Username uid : User Unique Identifier","title":"Providers"},{"location":"providers/#providers","text":"Providers allow external Applications to authenticate against passbook and use its User Information.","title":"Providers"},{"location":"providers/#openid-provider","text":"This provider uses the commonly used OpenID Connect variation of OAuth2.","title":"OpenID Provider"},{"location":"providers/#oauth2-provider","text":"This provider is slightly different than the OpenID Provider. While it uses the same basic OAuth2 Protocol, it provides a GitHub-compatible Endpoint. This allows you to integrate Applications, which don't support Custom OpenID Providers. The API exposes Username, E-Mail, Name and Groups in a GitHub-compatible format.","title":"OAuth2 Provider"},{"location":"providers/#saml-provider","text":"This provider allows you to integrate Enterprise Software using the SAML2 Protocol. It supports signed Requests. This Provider also has Property Mappings , which allows you to expose Vendor-specific Fields. Default fields are: eduPersonPrincipalName : User's E-Mail cn : User's Full Name mail : User's E-Mail displayName : User's Username uid : User Unique Identifier","title":"SAML Provider"},{"location":"sources/","text":"Sources \u00b6 Sources allow you to connect passbook to an existing User directory. They can also be used for Social-Login, using external Providers like Facebook, Twitter, etc. Generic OAuth Source \u00b6 All Integration-specific Sources are documented in the Integrations Section This source allows users to enroll themselves with an External OAuth-based Identity Provider. The Generic Provider expects the Endpoint to return OpenID-Connect compatible Information. Vendor specific Implementations have their own OAuth Source. Policies: Allow/Forbid Users from linking their Accounts with this Provider Request Token URL: This field is used for OAuth v1 Implementations and will be provided by the Provider. Authorization URL: This value will be provided by the Provider. Access Token URL: This value will be provided by the Provider. Profile URL: This URL is called by passbook to retrieve User information upon successful authentication. Consumer key/Consumer secret: These values will be provided by the Provider. SAML Source \u00b6 This source allows passbook to act as a SAML Service Provider. Just like the SAML Provider, it supports signed Requests. Vendor specific documentation can be found in the Integrations Section LDAP Source \u00b6 This source allows you to import Users and Groups from an LDAP Server Server URI: URI to your LDAP Server/Domain Controller Bind CN: CN to bind as, this can also be a UPN in the format of user@domain.tld Bind password: Password used during the bind process Enable Start TLS: Enables StartTLS functionality. To use SSL instead, use port 636 Base DN: Base DN used for all LDAP queries Addition User DN: Prepended to Base DN for User-queries. Addition Group DN: Prepended to Base DN for Group-queries. User object filter: Consider Objects matching this filter to be Users. Group object filter: Consider Objects matching this filter to be Groups. User group membership field: Field which contains Groups of user. Object uniqueness field: Field which contains a unique Identifier. Sync groups: Enable/disable Group synchronization. Groups are synced in the background every 5 minutes. Sync parent group: Optionally set this Group as parent Group for all synced Groups (allows you to, for example, import AD Groups under a root imported-from-ad group.) Property mappings: Define which LDAP Properties map to which passbook Properties. The default set of Property Mappings is generated for Active Directory. See also LDAP Property Mappings","title":"Sources"},{"location":"sources/#sources","text":"Sources allow you to connect passbook to an existing User directory. They can also be used for Social-Login, using external Providers like Facebook, Twitter, etc.","title":"Sources"},{"location":"sources/#generic-oauth-source","text":"All Integration-specific Sources are documented in the Integrations Section This source allows users to enroll themselves with an External OAuth-based Identity Provider. The Generic Provider expects the Endpoint to return OpenID-Connect compatible Information. Vendor specific Implementations have their own OAuth Source. Policies: Allow/Forbid Users from linking their Accounts with this Provider Request Token URL: This field is used for OAuth v1 Implementations and will be provided by the Provider. Authorization URL: This value will be provided by the Provider. Access Token URL: This value will be provided by the Provider. Profile URL: This URL is called by passbook to retrieve User information upon successful authentication. Consumer key/Consumer secret: These values will be provided by the Provider.","title":"Generic OAuth Source"},{"location":"sources/#saml-source","text":"This source allows passbook to act as a SAML Service Provider. Just like the SAML Provider, it supports signed Requests. Vendor specific documentation can be found in the Integrations Section","title":"SAML Source"},{"location":"sources/#ldap-source","text":"This source allows you to import Users and Groups from an LDAP Server Server URI: URI to your LDAP Server/Domain Controller Bind CN: CN to bind as, this can also be a UPN in the format of user@domain.tld Bind password: Password used during the bind process Enable Start TLS: Enables StartTLS functionality. To use SSL instead, use port 636 Base DN: Base DN used for all LDAP queries Addition User DN: Prepended to Base DN for User-queries. Addition Group DN: Prepended to Base DN for Group-queries. User object filter: Consider Objects matching this filter to be Users. Group object filter: Consider Objects matching this filter to be Groups. User group membership field: Field which contains Groups of user. Object uniqueness field: Field which contains a unique Identifier. Sync groups: Enable/disable Group synchronization. Groups are synced in the background every 5 minutes. Sync parent group: Optionally set this Group as parent Group for all synced Groups (allows you to, for example, import AD Groups under a root imported-from-ad group.) Property mappings: Define which LDAP Properties map to which passbook Properties. The default set of Property Mappings is generated for Active Directory. See also LDAP Property Mappings","title":"LDAP Source"},{"location":"installation/docker-compose/","text":"docker-compose \u00b6 This installation Method is for test-setups and small-scale productive setups. Prerequisites \u00b6 docker docker-compose Install \u00b6 Download the latest docker-compose.yml from here . Place it in a directory of your choice. passbook needs to know it's primary URL to create links in E-Mails and set cookies, so you have to run the following command: export PASSBOOK_DOMAIN=domain.tld # this can be any domain or IP, it just needs to point to passbook. The compose file references the current latest version, which can be overridden with the SERVER_TAG Environment variable. If you plan to use this setup for production, it is also advised to change the PostgreSQL Password by setting PG_PASS to a password of your choice. Now you can pull the Docker images needed by running docker-compose pull . After this has finished, run docker-compose up -d to start passbook. passbook will then be reachable on Port 80. You can optionally configure the packaged traefik to use Let's Encrypt for TLS Encryption.","title":"docker-compose"},{"location":"installation/docker-compose/#docker-compose","text":"This installation Method is for test-setups and small-scale productive setups.","title":"docker-compose"},{"location":"installation/docker-compose/#prerequisites","text":"docker docker-compose","title":"Prerequisites"},{"location":"installation/docker-compose/#install","text":"Download the latest docker-compose.yml from here . Place it in a directory of your choice. passbook needs to know it's primary URL to create links in E-Mails and set cookies, so you have to run the following command: export PASSBOOK_DOMAIN=domain.tld # this can be any domain or IP, it just needs to point to passbook. The compose file references the current latest version, which can be overridden with the SERVER_TAG Environment variable. If you plan to use this setup for production, it is also advised to change the PostgreSQL Password by setting PG_PASS to a password of your choice. Now you can pull the Docker images needed by running docker-compose pull . After this has finished, run docker-compose up -d to start passbook. passbook will then be reachable on Port 80. You can optionally configure the packaged traefik to use Let's Encrypt for TLS Encryption.","title":"Install"},{"location":"installation/install/","text":"Installation \u00b6 There are two supported ways to install passbook: docker-compose for test- or small productive setups Kubernetes for larger Productive setups","title":"Installation"},{"location":"installation/install/#installation","text":"There are two supported ways to install passbook: docker-compose for test- or small productive setups Kubernetes for larger Productive setups","title":"Installation"},{"location":"installation/kubernetes/","text":"Kubernetes \u00b6 For a mid to high-load Installation, Kubernetes is recommended. passbook is installed using a helm-chart.","title":"Kubernetes"},{"location":"installation/kubernetes/#kubernetes","text":"For a mid to high-load Installation, Kubernetes is recommended. passbook is installed using a helm-chart.","title":"Kubernetes"},{"location":"integrations/services/gitlab/","text":"GitLab Integration \u00b6 What is GitLab \u00b6 From https://about.gitlab.com/what-is-gitlab/ GitLab is a complete DevOps platform, delivered as a single application. This makes GitLab unique and makes Concurrent DevOps possible, unlocking your organization from the constraints of a pieced together toolchain. Join us for a live Q&A to learn how GitLab can give you unmatched visibility and higher levels of efficiency in a single application across the DevOps lifecycle. Preparation \u00b6 The following placeholders will be used: gitlab.company is the FQDN of the GitLab Install passbook.company is the FQDN of the passbook Install Create an application in passbook and note the slug, as this will be used later. Create a SAML Provider with the following Parameters: ACS URL: https://gitlab.company/users/auth/saml/callback Audience: https://gitlab.company Issuer: https://gitlab.company You can of course use a custom Signing Certificate, and adjust the Assertion Length. To get the value for idp_cert_fingerprint , you can use a tool like this . GitLab Configuration \u00b6 Paste the following block in your gitlab.rb file, after replacing the placeholder values from above. The file is located in /etc/gitlab . gitlab_rails['omniauth_enabled'] = true gitlab_rails['omniauth_allow_single_sign_on'] = ['saml'] gitlab_rails['omniauth_sync_email_from_provider'] = 'saml' gitlab_rails['omniauth_sync_profile_from_provider'] = ['saml'] gitlab_rails['omniauth_sync_profile_attributes'] = ['email'] gitlab_rails['omniauth_auto_sign_in_with_provider'] = 'saml' gitlab_rails['omniauth_block_auto_created_users'] = false gitlab_rails['omniauth_auto_link_saml_user'] = true gitlab_rails['omniauth_providers'] = [ { name: 'saml', args: { assertion_consumer_service_url: 'https://gitlab.company/users/auth/saml/callback', idp_cert_fingerprint: '4E:1E:CD:67:4A:67:5A:E9:6A:D0:3C:E6:DD:7A:F2:44:2E:76:00:6A', idp_sso_target_url: 'https://passbook.company/application/saml/<passbook application slug>/login/', issuer: 'https://gitlab.company', name_identifier_format: 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress', attribute_statements: { email: ['urn:oid:1.3.6.1.4.1.5923.1.1.1.6'], first_name: ['urn:oid:2.5.4.3'], nickname: ['urn:oid:2.16.840.1.113730.3.1.241'] } }, label: 'passbook' } ] Afterwards, either run gitlab-ctl reconfigure if you're running GitLab Omnibus, or restart the container if you're using the container.","title":"GitLab"},{"location":"integrations/services/gitlab/#gitlab-integration","text":"","title":"GitLab Integration"},{"location":"integrations/services/gitlab/#what-is-gitlab","text":"From https://about.gitlab.com/what-is-gitlab/ GitLab is a complete DevOps platform, delivered as a single application. This makes GitLab unique and makes Concurrent DevOps possible, unlocking your organization from the constraints of a pieced together toolchain. Join us for a live Q&A to learn how GitLab can give you unmatched visibility and higher levels of efficiency in a single application across the DevOps lifecycle.","title":"What is GitLab"},{"location":"integrations/services/gitlab/#preparation","text":"The following placeholders will be used: gitlab.company is the FQDN of the GitLab Install passbook.company is the FQDN of the passbook Install Create an application in passbook and note the slug, as this will be used later. Create a SAML Provider with the following Parameters: ACS URL: https://gitlab.company/users/auth/saml/callback Audience: https://gitlab.company Issuer: https://gitlab.company You can of course use a custom Signing Certificate, and adjust the Assertion Length. To get the value for idp_cert_fingerprint , you can use a tool like this .","title":"Preparation"},{"location":"integrations/services/gitlab/#gitlab-configuration","text":"Paste the following block in your gitlab.rb file, after replacing the placeholder values from above. The file is located in /etc/gitlab . gitlab_rails['omniauth_enabled'] = true gitlab_rails['omniauth_allow_single_sign_on'] = ['saml'] gitlab_rails['omniauth_sync_email_from_provider'] = 'saml' gitlab_rails['omniauth_sync_profile_from_provider'] = ['saml'] gitlab_rails['omniauth_sync_profile_attributes'] = ['email'] gitlab_rails['omniauth_auto_sign_in_with_provider'] = 'saml' gitlab_rails['omniauth_block_auto_created_users'] = false gitlab_rails['omniauth_auto_link_saml_user'] = true gitlab_rails['omniauth_providers'] = [ { name: 'saml', args: { assertion_consumer_service_url: 'https://gitlab.company/users/auth/saml/callback', idp_cert_fingerprint: '4E:1E:CD:67:4A:67:5A:E9:6A:D0:3C:E6:DD:7A:F2:44:2E:76:00:6A', idp_sso_target_url: 'https://passbook.company/application/saml/<passbook application slug>/login/', issuer: 'https://gitlab.company', name_identifier_format: 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress', attribute_statements: { email: ['urn:oid:1.3.6.1.4.1.5923.1.1.1.6'], first_name: ['urn:oid:2.5.4.3'], nickname: ['urn:oid:2.16.840.1.113730.3.1.241'] } }, label: 'passbook' } ] Afterwards, either run gitlab-ctl reconfigure if you're running GitLab Omnibus, or restart the container if you're using the container.","title":"GitLab Configuration"},{"location":"integrations/services/harbor/","text":"Harbor Integration \u00b6 What is Harbor \u00b6 From https://goharbor.io Harbor is an open source container image registry that secures images with role-based access control, scans images for vulnerabilities, and signs images as trusted. A CNCF Incubating project, Harbor delivers compliance, performance, and interoperability to help you consistently and securely manage images across cloud native compute platforms like Kubernetes and Docker. Preparation \u00b6 The following placeholders will be used: harbor.company is the FQDN of the Harbor Install passbook.company is the FQDN of the passbook Install Create an application in passbook. Create an OpenID Provider with the following Parameters: Client Type: Confidential Response types: code (Authorization Code Flow) JWT Algorithm: RS256 Redirect URIs: https://harbor.company/c/oidc/callback Scopes: openid Harbor \u00b6","title":"Harbor"},{"location":"integrations/services/harbor/#harbor-integration","text":"","title":"Harbor Integration"},{"location":"integrations/services/harbor/#what-is-harbor","text":"From https://goharbor.io Harbor is an open source container image registry that secures images with role-based access control, scans images for vulnerabilities, and signs images as trusted. A CNCF Incubating project, Harbor delivers compliance, performance, and interoperability to help you consistently and securely manage images across cloud native compute platforms like Kubernetes and Docker.","title":"What is Harbor"},{"location":"integrations/services/harbor/#preparation","text":"The following placeholders will be used: harbor.company is the FQDN of the Harbor Install passbook.company is the FQDN of the passbook Install Create an application in passbook. Create an OpenID Provider with the following Parameters: Client Type: Confidential Response types: code (Authorization Code Flow) JWT Algorithm: RS256 Redirect URIs: https://harbor.company/c/oidc/callback Scopes: openid","title":"Preparation"},{"location":"integrations/services/harbor/#harbor","text":"","title":"Harbor"},{"location":"integrations/services/rancher/","text":"Rancher Integration \u00b6 What is Rancher \u00b6 From https://rancher.com/products/rancher An Enterprise Platform for Managing Kubernetes Everywhere Rancher is a platform built to address the needs of the DevOps teams deploying applications with Kubernetes, and the IT staff responsible for delivering an enterprise-critical service. Preparation \u00b6 The following placeholders will be used: rancher.company is the FQDN of the Rancher Install passbook.company is the FQDN of the passbook Install Create an application in passbook and note the slug, as this will be used later. Create a SAML Provider with the following Parameters: ACS URL: https://rancher.company/v1-saml/adfs/saml/acs Audience: https://rancher.company/v1-saml/adfs/saml/metadata Issuer: passbook You can of course use a custom Signing Certificate, and adjust the Assertion Length. Rancher \u00b6","title":"Rancher"},{"location":"integrations/services/rancher/#rancher-integration","text":"","title":"Rancher Integration"},{"location":"integrations/services/rancher/#what-is-rancher","text":"From https://rancher.com/products/rancher An Enterprise Platform for Managing Kubernetes Everywhere Rancher is a platform built to address the needs of the DevOps teams deploying applications with Kubernetes, and the IT staff responsible for delivering an enterprise-critical service.","title":"What is Rancher"},{"location":"integrations/services/rancher/#preparation","text":"The following placeholders will be used: rancher.company is the FQDN of the Rancher Install passbook.company is the FQDN of the passbook Install Create an application in passbook and note the slug, as this will be used later. Create a SAML Provider with the following Parameters: ACS URL: https://rancher.company/v1-saml/adfs/saml/acs Audience: https://rancher.company/v1-saml/adfs/saml/metadata Issuer: passbook You can of course use a custom Signing Certificate, and adjust the Assertion Length.","title":"Preparation"},{"location":"integrations/services/rancher/#rancher","text":"","title":"Rancher"},{"location":"integrations/services/sentry/","text":"Sentry Integration \u00b6 What is Sentry \u00b6 From https://sentry.io Sentry provides self-hosted and cloud-based error monitoring that helps all software teams discover, triage, and prioritize errors in real-time. One million developers at over fifty thousand companies already ship better software faster with Sentry. Won\u2019t you join them? Preparation \u00b6 The following placeholders will be used: sentry.company is the FQDN of the Sentry Install passbook.company is the FQDN of the passbook Install Create an application in passbook. Create an OpenID Provider with the following Parameters: Client Type: Confidential Response types: code (Authorization Code Flow) JWT Algorithm: RS256 Redirect URIs: https://sentry.company/auth/sso/ Scopes: openid email Sentry \u00b6 This guide assumes you've installed Sentry using getsentry/onpremise Add sentry-auth-oidc to onpremise/sentry/requirements.txt (Create the file if it doesn't exist yet) Add the following block to your onpremise/sentry/sentry.conf.py : OIDC_ISSUER = \"passbook\" OIDC_CLIENT_ID = \"<Client ID from passbook>\" OIDC_CLIENT_SECRET = \"<Client Secret from passbook>\" OIDC_SCOPE = \"openid email\" OIDC_DOMAIN = \"https://passbook.company/application/oidc/\"","title":"Sentry"},{"location":"integrations/services/sentry/#sentry-integration","text":"","title":"Sentry Integration"},{"location":"integrations/services/sentry/#what-is-sentry","text":"From https://sentry.io Sentry provides self-hosted and cloud-based error monitoring that helps all software teams discover, triage, and prioritize errors in real-time. One million developers at over fifty thousand companies already ship better software faster with Sentry. Won\u2019t you join them?","title":"What is Sentry"},{"location":"integrations/services/sentry/#preparation","text":"The following placeholders will be used: sentry.company is the FQDN of the Sentry Install passbook.company is the FQDN of the passbook Install Create an application in passbook. Create an OpenID Provider with the following Parameters: Client Type: Confidential Response types: code (Authorization Code Flow) JWT Algorithm: RS256 Redirect URIs: https://sentry.company/auth/sso/ Scopes: openid email","title":"Preparation"},{"location":"integrations/services/sentry/#sentry","text":"This guide assumes you've installed Sentry using getsentry/onpremise Add sentry-auth-oidc to onpremise/sentry/requirements.txt (Create the file if it doesn't exist yet) Add the following block to your onpremise/sentry/sentry.conf.py : OIDC_ISSUER = \"passbook\" OIDC_CLIENT_ID = \"<Client ID from passbook>\" OIDC_CLIENT_SECRET = \"<Client Secret from passbook>\" OIDC_SCOPE = \"openid email\" OIDC_DOMAIN = \"https://passbook.company/application/oidc/\"","title":"Sentry"},{"location":"integrations/services/tower-awx/","text":"Ansible Tower / AWX Integration \u00b6 What is Tower \u00b6 From https://docs.ansible.com/ansible/2.5/reference_appendices/tower.html Ansible Tower (formerly \u2018AWX\u2019) is a web-based solution that makes Ansible even more easy to use for IT teams of all kinds. It\u2019s designed to be the hub for all of your automation tasks. Tower allows you to control access to who can access what, even allowing sharing of SSH credentials without someone being able to transfer those credentials. Inventory can be graphically managed or synced with a wide variety of cloud sources. It logs all of your jobs, integrates well with LDAP, and has an amazing browsable REST API. Command line tools are available for easy integration with Jenkins as well. Provisioning callbacks provide great support for autoscaling topologies. Note AWX is the Open-Source version of Tower, and AWX will be used interchangeably throughout this document. Preparation \u00b6 The following placeholders will be used: awx.company is the FQDN of the AWX/Tower Install passbook.company is the FQDN of the passbook Install Create an application in passbook and note the slug, as this will be used later. Create a SAML Provider with the following Parameters: ACS URL: https://awx.company/sso/complete/saml/ Audience: awx Issuer: https://awx.company/sso/metadata/saml/ You can of course use a custom Signing Certificate, and adjust the Assertion Length. AWX Configuration \u00b6 Navigate to https://awx.company/#/settings/auth to configure SAML. Set the Field SAML SERVICE PROVIDER ENTITY ID to awx . For the fields SAML SERVICE PROVIDER PUBLIC CERTIFICATE and SAML SERVICE PROVIDER PRIVATE KEY , you can either use custom Certificates, or use the self-signed Pair generated by Passbook.","title":"Ansible Tower/AWX"},{"location":"integrations/services/tower-awx/#ansible-tower-awx-integration","text":"","title":"Ansible Tower / AWX Integration"},{"location":"integrations/services/tower-awx/#what-is-tower","text":"From https://docs.ansible.com/ansible/2.5/reference_appendices/tower.html Ansible Tower (formerly \u2018AWX\u2019) is a web-based solution that makes Ansible even more easy to use for IT teams of all kinds. It\u2019s designed to be the hub for all of your automation tasks. Tower allows you to control access to who can access what, even allowing sharing of SSH credentials without someone being able to transfer those credentials. Inventory can be graphically managed or synced with a wide variety of cloud sources. It logs all of your jobs, integrates well with LDAP, and has an amazing browsable REST API. Command line tools are available for easy integration with Jenkins as well. Provisioning callbacks provide great support for autoscaling topologies. Note AWX is the Open-Source version of Tower, and AWX will be used interchangeably throughout this document.","title":"What is Tower"},{"location":"integrations/services/tower-awx/#preparation","text":"The following placeholders will be used: awx.company is the FQDN of the AWX/Tower Install passbook.company is the FQDN of the passbook Install Create an application in passbook and note the slug, as this will be used later. Create a SAML Provider with the following Parameters: ACS URL: https://awx.company/sso/complete/saml/ Audience: awx Issuer: https://awx.company/sso/metadata/saml/ You can of course use a custom Signing Certificate, and adjust the Assertion Length.","title":"Preparation"},{"location":"integrations/services/tower-awx/#awx-configuration","text":"Navigate to https://awx.company/#/settings/auth to configure SAML. Set the Field SAML SERVICE PROVIDER ENTITY ID to awx . For the fields SAML SERVICE PROVIDER PUBLIC CERTIFICATE and SAML SERVICE PROVIDER PRIVATE KEY , you can either use custom Certificates, or use the self-signed Pair generated by Passbook.","title":"AWX Configuration"},{"location":"reference/property-mappings/user-object/","text":"Passbook User Object \u00b6 The User object has the following attributes: username : User's Username email User's E-Mail name User's Display Name is_staff Boolean field if user is staff is_active Boolean field if user is active date_joined Date User joined/was created password_change_date Date Password was last changed attributes Dynamic Attributes Examples \u00b6 List all the User's Group Names [{% for group in user.groups.all() %}'{{ group.name }}',{% endfor %}]","title":"User Object"},{"location":"reference/property-mappings/user-object/#passbook-user-object","text":"The User object has the following attributes: username : User's Username email User's E-Mail name User's Display Name is_staff Boolean field if user is staff is_active Boolean field if user is active date_joined Date User joined/was created password_change_date Date Password was last changed attributes Dynamic Attributes","title":"Passbook User Object"},{"location":"reference/property-mappings/user-object/#examples","text":"List all the User's Group Names [{% for group in user.groups.all() %}'{{ group.name }}',{% endfor %}]","title":"Examples"}]}